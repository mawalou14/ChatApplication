@page "/"
@using BaseLibrary.DTO.ApplicationUserDTOs
@using BaseLibrary.DTO.messageDTOs
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<div class="mx-auto max-w-9xl px-4 sm:px-6 lg:px-8 mt-3">
    <div class="mx-auto max-w-7xl">
        <div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
            <div class="h-auto relative items-center space-x-3 rounded-lg border border-gray-300 bg-white px-6 py-5 shadow-sm focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-2 hover:border-gray-400">
                <div class="mb-3">Type Your Message Here</div>
                <div class="mt-3">
                    <label for="user" class="block text-sm font-medium leading-6 text-gray-900">User</label>
                    <select @bind="selectedUserId" id="user" name="user" class="mt-2 block w-full rounded-md border-0 py-1.5 pl-3 pr-10 text-gray-900 ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-indigo-600 sm:text-sm sm:leading-6">
                        @if (users is not null)
                        {
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Name, @user.Email</option>
                            }
                        }
                        else
                        {
                            <option>No User Found</option>
                        }
                    </select>
                </div>
                <div class="mt-3">
                    <label for="message" class="block text-sm font-medium leading-6 text-gray-900">Add your message</label>
                    <div class="mt-2">
                        <textarea @bind="messageText" rows="4" name="message" id="message" class="block w-full rounded-md border-0 p-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"></textarea>
                    </div>
                </div>
                <div class="mt-3">
                    <button @onclick="SendMessage" type="button" class="rounded-md bg-indigo-600 px-3 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">Send Message</button>
                </div>
            </div>

            <div class="h-auto max-h-screen overflow-auto relative items-center space-x-3 rounded-lg border border-gray-300 bg-white px-6 py-5 shadow-sm focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-2 hover:border-gray-400">
                <div class="mb-3"><h3>All Messages</h3></div>
                <ul>
                    @if (messages is not null)
                    {
                        @foreach (var message in messages)
                        {
                            <li class="mt-3">From: <b>@message.ApplicationUser.Name</b> Date: <b>@message.Date</b>, Message: <b>@message.Message</b></li>
                        }
                    }
                    else
                    {
                        <div>Messages Empty</div>
                    }
                </ul>
            </div>
        </div>
    </div>
</div>
@code {

    // Inject an HttpClient to make API calls
    [Inject]
    private HttpClient httpClient { get; set; }

    private HubConnection hubConnection;
    private List<string> Messages = [];

    private List<GetMessageDTO> messages;
    private List<GetApplicationUsersDTO> users;
    private Guid selectedUserr;
    private GetApplicationUsersDTO selectedUser;
    private string messageText;
    private DateTime Date = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        // Load messages and users from the API
        users = await GetUsersFromAPI(); // Fixed typo here
        messages = await GetMessagesFromAPI(); // Fixed typo here

        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/chatHub")) // Fixed typo here
            .Build();

        // Configure the "RecieveMessage" event handler
        hubConnection.On<string, string, DateTime>("RecieveMessage", (UserName, Message, Date) =>
        {
            var concatMessage = $"From: <b>{UserName}</b>{Environment.NewLine} Date: <b>{Date}</b>, Message: <b>{Message}</b>{Environment.NewLine}";
            Messages.Add(concatMessage);
            InvokeAsync(() => StateHasChanged());
        });

        // Start the SignalR connection
        hubConnection.StartAsync();
    }

    private async Task<List<GetMessageDTO>?> GetMessagesFromAPI()
    {
        try
        {
            // Use HttpClient to call your API and retrieve data
            var response = await httpClient.GetAsync("api/message");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<List<GetMessageDTO>>();
            }
            else
            {
                // Handle errors here
                return new List<GetMessageDTO>();
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions here
            Console.WriteLine($"Error during the API call: {ex.Message}");
            return new List<GetMessageDTO>();
        }
    }

    private async Task<List<GetApplicationUsersDTO>?> GetUsersFromAPI()
    {
        try
        {
            // Use HttpClient to call your API and retrieve data
            var response = await httpClient.GetAsync("api/user");
            if (response.IsSuccessStatusCode)
            {
                return await response.Content.ReadFromJsonAsync<List<GetApplicationUsersDTO>>();
            }
            else
            {
                // Handle errors here
                return new List<GetApplicationUsersDTO>();
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions here
            Console.WriteLine($"Error during the API call: {ex.Message}");
            return new List<GetApplicationUsersDTO>();
        }
    }

    private async Task SendMessage()
    {
        try
        {
            var messageDTO = new AddMessageDTO
                {
                    Message = messageText,
                    ApplicationUserId = selectedUser.Id
                };

            var response = await httpClient.PostAsJsonAsync("api/message", messageDTO);
            if (response.IsSuccessStatusCode)
            {
                // Message sent successfully, reload messages
                // await GetMessagesFromAPI(); // No need to reload messages, handled by SignalR
                await hubConnection!.SendAsync("SendMessage", selectedUser.Name, messageText, Date);
                messageText = ""; // Clear the message box
            }
            else
            {
                // Handle error
                Console.WriteLine("Failed to send message.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending message: {ex.Message}");
        }
    }
}

